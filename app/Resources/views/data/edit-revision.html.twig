{% extends 'base.html.twig' %}

{% block title %}{% if revision.ouuid %}Edit {{ revision.contentType.name|humanize }} : {{ revision.ouuid }}{% else %}{{ revision.contentType.name|humanize }} : new draft{% endif %}{% endblock %}
{% block pagetitle %}{% if revision.ouuid %}Edit {{ revision.contentType.name|humanize }} : {{ revision.ouuid }}{% else %}{{ revision.contentType.name|humanize }} : new draft{% endif %}{% endblock %} 
{% block subtitle %}<small>Working area</small>{% endblock %} 


{% block body %}
	{% if not revision.draft %}
		<div class="alert alert-warning">
        	<button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
            <h4><i class="icon fa fa-ban"></i> Alert!</h4>
                You are editing an already publish revision. Are you sure that is a good idea?
                Is not a better idea to create a draft: 
                {% include 'elements/post-button.html.twig' with { 
							'url': path('revision.new-draft', {'ouuid': revision.ouuid, 'type': revision.contentType.name }),
							'label': 'Edit draft', 
							'icon': 'pencil' }%} .
        </div>
	{% endif %}

<div class="box box-primary">
	<div class="box-header with-border">
		<h3 class="box-title text-{{ revision.contentType.color }}"><i class="{% if revision.contentType.icon %}{{ revision.contentType.icon }} {% else %} fa fa-question {% endif %} "></i>&nbsp;&nbsp;&nbsp;{{ revision.contentType.name|humanize }}</h3>
	</div>
	<!-- /.box-header -->
	<!-- form start -->
		{{ form_start(form) }}
		<div class="box-body">
			
			{{ form_widget(form.dataField) }}
	
		</div>
		<!-- /.box-body -->
		<div class="box-footer">
			<div class="btn-group pull-right">
					{{ form_widget(form.save) }}
				{% if revision.draft %}
					{{ form_widget(form.publish) }}
					{% include 'elements/post-button.html.twig' with {
						'url': path('revision.discard', {'revisionId': revision.id, 'type': revision.contentType.name}),
						'message': 'Discard this draft ?',
						'label': 'Discard',
						'icon': 'trash'
					}%}
				{% else %}
				{% endif %}
			</div>
		</div>
		{{ form_end(form) }}
		

	<div class="modal fade" id="data-out-of-sync" tabindex="-1" role="dialog" aria-labelledby="myModalOutOfSync">
	  <div class="modal-dialog" role="document">
	    <div class="modal-content">
	      <div class="modal-header">
	        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
	        <h4 class="modal-title" id="myModalOutOfSync">
						<strong>Out of sync</strong>	
			</h4>
	      </div>
	      <div class="modal-body">
			There is something wrong with this object. Please reload the page.
		  </div>
	      <div class="modal-footer">
	      	<div class="btn-group">
		        <button type="button" class="btn btn-primary" data-dismiss="modal"><i class="fa fa-close"></i> Close</button>
	      	</div>
	      </div>
	    </div>
	  </div>
	</div>	
		
		
</div>

{% endblock %}


{% block javascripts %}

<script type="text/javascript">

var globalWaitingResponse = false;

function onFormChange(){
	{% if revision.draft %}
		if(!globalWaitingResponse){
			globalWaitingResponse = true;
			
			//update ckeditor's textareas
			for (var i in CKEDITOR.instances) {
		        CKEDITOR.instances[i].updateElement();
			}
			
			$.post("{{ url('revision.ajaxupdate', { revisionId: revision.id }) }}", $("form[name={{ form.vars.id }}]").serialize())
			  .done(function(message) {
				  var response = jQuery.parseJSON( message );
	
				  $('.has-error').removeClass('has-error');
				  
				  $(response.errors).each(function(index, item){
					  $('#'+item.propertyPath).parent().addClass('has-error');
				  });
			  })
			  .fail(function() {
				//alert( "The autosave returns an error! Please try to refresh the page." );
				$('#data-out-of-sync').modal('show') ;
			  })
			  .always(function() {
				globalWaitingResponse = false;
			});
		}
	{% endif %}
}

function attachObjectPicker(domId) {

	$('#'+domId).find('.cke_dialog_ui_input_select').css('width', '100%');
	$('#'+domId).find('.cke_dialog_ui_input_select').css('z-index', '20000');
	$('#'+domId).find('select').select2({
		ajax: {
			url: '{{ url("elasticsearch.api.search") }}',
	    	dataType: 'json',
	    	delay: 250,
	    	data: function (params) {
	      		return {
		        q: params.term, // search term
		        page: params.page,
		        environment: environment,
		        type: type
		      };
		    },
			processResults: function (data, params) {
				// parse the results into the format expected by Select2
				// since we are using custom formatting functions we do not need to
				// alter the remote JSON data, except to indicate that infinite
				// scrolling can be used
				params.page = params.page || 1;
		
		      	return {
			        results: data.items,
			        pagination: {
			          more: (params.page * 30) < data.total_count
			        }
		      	};
	    	},
	    	cache: true
	  	},
	  	//escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
	  	//templateResult: formatRepo, // omitted for brevity, see the source of this page
	  	//templateSelection: formatRepoSelection, // omitted for brevity, see the source of this page
	  	minimumInputLength: 1
	});
}

function addEventListeners(target){
	target.find('.remove-content-button').on('click', function(e) {
		// prevent the link from creating a "#" on the URL
        e.preventDefault();
        
        var panel = $(this).closest('.collection-item-panel');
        panel.remove();
        onFormChange();
	});

	target.find("input").keypress(onFormChange);
	target.find("input").change(onFormChange);
	target.find("select").change(onFormChange);
	target.find("textarea").keypress(onFormChange);

	target.find('.add-content-button').on('click', function(e) {
		// prevent the link from creating a "#" on the URL
        e.preventDefault();

        var panel = $(this).closest('.collection-panel');
        var index = panel.data('index');
		var prototype = panel.data('prototype');
     	// Replace '__name__' in the prototype's HTML to
        // instead be a number based on how many items we have
        var newForm = $(prototype.replace(/__name__/g, index));
     	// increase the index with one for the next item
        panel.data('index', index + 1);

        addEventListeners(newForm);

        panel.children('.panel-body').append(newForm);
        onFormChange();
        
	});

	target.find(".ckeditor_ems").each(function(index){
		CKEDITOR.replace( $( this ).attr('id'), {
			//uiColor: 'pink',
			//removePlugins: 'link',
			//extraPlugins: 'adv_link'
			//TODO: include the eMS plugin
		});
	});
	
	target.find(".objectpicker").each(function(index){
		var type = $( this ).data('type'); 
		var dynamicLoading = $( this ).data('dynamic-loading'); 

		var params = {
		  	escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
		  	templateResult: formatRepo, // omitted for brevity, see the source of this page
		  	templateSelection: formatRepoSelection // omitted for brevity, see the source of this page
		};


		if(dynamicLoading){
		  	params.minimumInputLength = 1,
			params.ajax = {
				url: '{{ url("elasticsearch.api.search") }}',
		    	dataType: 'json',
		    	delay: 250,
		    	data: function (params) {
		      		return {
			        q: params.term, // search term
			        page: params.page,
			        type: type
			      };
			    },
				processResults: function (data, params) {
					// parse the results into the format expected by Select2
					// since we are using custom formatting functions we do not need to
					// alter the remote JSON data, except to indicate that infinite
					// scrolling can be used
					params.page = params.page || 1;
			
			      	return {
				        results: data.items,
				        pagination: {
				          more: (params.page * 30) < data.total_count
				        }
			      	};
		    	},
		    	cache: true
		  	};
		}
		
		$( this ).select2(params);
    });	
    
	target.find(".colorpicker-component").colorpicker();

	target.find(".colorpicker-component").bind('changeColor', onFormChange);

	target.find(".timepicker").each(function(index){

		var settings = {
	            showMeridian: 	$( this ).data('show-meridian'),
	            explicitMode: 	$( this ).data('explicit-mode'),
        		minuteStep: 	$( this ).data('minute-step'),
        		disableMousewheel: true
		};

		var defaultTime = $( this ).data('default-time');
		//console.log( defaultTime !== false );
		if(defaultTime !== false) {
			if(defaultTime){
				settings.defaultTime = defaultTime;
			}
			else {
				settings.defaultTime = false;
			}
		}
		//console.log($( this ).val());

		//console.log(settings);
		$( this ).timepicker(settings);

		
		if(defaultTime === false && !$( this ).val() ) {
			$( this ).timepicker('setTime', new Date() );
		}
	});


	target.find('.datepicker').each(function( index ) {
		var params = {
			format: $(this).attr('data-date-format'),
			todayBtn: true,
			weekStart: $(this).attr('data-week-start'),
			daysOfWeekHighlighted: $(this).attr('data-days-of-week-highlighted'),
			daysOfWeekDisabled: $(this).attr('data-days-of-week-disabled'),
			todayHighlight: $(this).attr('data-today-highlight')
		}

		if($(this).attr('data-multidate') && $(this).attr('data-multidate') != 'false'){
			params.multidate = true;
		}

	  	$(this).datepicker(params)
	});
}

function formatRepo (repo) {
    if (repo.loading) return repo.text;

    var markup = "<div class='select2-result-repository clearfix'>" +
      repo.text + "</div>";
      
	return markup;
}

function formatRepoSelection (repo) {
    return repo.text;
}


$(window).ready(function() {	
	addEventListeners($('form[name={{ form.vars.id }}]'));
});


$(window).load(function() {
	/** TODO:  quid d'un CKEditor ajouté au vol*/
	for (var i in CKEDITOR.instances) {
        CKEDITOR.instances[i].on('key', onFormChange );
	}
});

</script>

	{% if revision.draft %}
		{% include 'app/menu.html.twig' with {
			'item':  'data-draft-' ~ revision.contentType.id
		}%}
	{% else %}
		{% include 'app/menu.html.twig' with {
			'item':  'data-index-' ~ revision.contentType.id
		}%}
	{% endif %}
	
{% endblock %}	

