{% extends 'base.html.twig' %}

{% block title %}{% if revision.ouuid %}Edit {{ revision.contentType.name|humanize }} : {{ revision.ouuid }}{% else %}{{ revision.contentType.name|humanize }} : new draft{% endif %}{% endblock %}
{% block pagetitle %}{% if revision.ouuid %}Edit {{ revision.contentType.name|humanize }} : {{ revision.ouuid }}{% else %}{{ revision.contentType.name|humanize }} : new draft{% endif %}{% endblock %} 
{% block subtitle %}<small>.....</small>{% endblock %} 


{% block body %}
	{% if not revision.draft %}
		<div class="alert alert-warning">
        	<button type="button" class="close" data-dismiss="alert" aria-hidden="true">Ã—</button>
            <h4><i class="icon fa fa-ban"></i> Alert!</h4>
                You are editing an already publish revision. Are you sure that is a good idea?
                Is not a better idea to create a draft: 
                {% include 'elements/post-button.html.twig' with { 
							'url': path('revision.new-draft', {'ouuid': revision.ouuid, 'type': revision.contentType.name }),
							'label': 'Edit draft', 
							'icon': 'pencil' }%} .
        </div>
	{% endif %}

<div class="box box-primary">
	<div class="box-header with-border">
		<h3 class="box-title text-{{ revision.contentType.color }}"><i class="{% if revision.contentType.icon %}{{ revision.contentType.icon }} {% else %} fa fa-question {% endif %} "></i> {{ revision.contentType.name }}</h3>
	</div>
	<!-- /.box-header -->
	<!-- form start -->
		{{ form_start(form) }}
		<div class="box-body">
			
			{{ form_widget(form.dataField) }}
	
		</div>
		<!-- /.box-body -->
		<div class="box-footer">
			<div class="btn-group pull-right">
					{{ form_widget(form.save) }}
				{% if revision.draft %}
					{{ form_widget(form.publish) }}
					{% include 'elements/post-button.html.twig' with {
						'url': path('revision.discard', {'revisionId': revision.id, 'type': revision.contentType.name}),
						'message': 'Discard this draft ?',
						'label': 'Discard',
						'icon': 'trash'
					}%}
				{% else %}
				{% endif %}
			</div>
		</div>
		{{ form_end(form) }}
</div>

{% endblock %}


{% block javascripts %}

<script type="text/javascript">


function formatRepo (repo) {
    if (repo.loading) return repo.text;

    var markup = "<div class='select2-result-repository clearfix'>" +
      repo.text + "</div>";
      
    return markup;
  }

  function formatRepoSelection (repo) {
    return repo.text;
  }


  $(window).load(function() {
	  		$(".objectpicker").each(function(index){


   			environment = $( this ).data('environment'); 
   			type = $( this ).data('type'); 
   			
	 		$( this ).select2({
			  ajax: {
			    url: '{{ url("elasticsearch.api.search") }}',
			    dataType: 'json',
			    delay: 250,
			    data: function (params) {
			      return {
			        q: params.term, // search term
			        page: params.page,
			        environment: environment,
			        type: type
			      };
			    },
			    processResults: function (data, params) {
			      // parse the results into the format expected by Select2
			      // since we are using custom formatting functions we do not need to
			      // alter the remote JSON data, except to indicate that infinite
			      // scrolling can be used
			      params.page = params.page || 1;
			
			      return {
			        results: data.items,
			        pagination: {
			          more: (params.page * 30) < data.total_count
			        }
			      };
			    },
			    cache: true
			  },
			  escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
			  minimumInputLength: 1,
			  templateResult: formatRepo, // omitted for brevity, see the source of this page
			  templateSelection: formatRepoSelection // omitted for brevity, see the source of this page
			});

    
    });

  });

</script>


	{% if revision.draft %}
		{% include 'app/menu.html.twig' with {
			'item':  'data-draft-' ~ revision.contentType.id
		}%}
<script type="text/javascript">
<!--

//-->

var globalWaitingResponse = false;

function onFormChange(){
	if(!globalWaitingResponse){
		globalWaitingResponse = true;
		$.post("{{ url('revision.ajaxupdate', { revisionId: revision.id }) }}", $("form[name={{ form.vars.id }}]").serialize())
		  .done(function(message) {
			  var response = jQuery.parseJSON( message );

			  $('.has-error').removeClass('has-error');
			  
			  $(response.errors).each(function(index, item){
				  $('#'+item.propertyPath).parent().addClass('has-error');
			  });
		  })
		  .fail(function() {
			alert( "The autosave returns an error! Please try to refresh the page." );
		  })
		  .always(function() {
			globalWaitingResponse = false;
		});
	}
}


$(window).load(function() {





	
	$("form[name={{ form.vars.id }}] input").keypress(onFormChange);
	$("form[name={{ form.vars.id }}] input").change(onFormChange);
	$("form[name={{ form.vars.id }}] select").change(onFormChange);
	$("form[name={{ form.vars.id }}] textarea").keypress(onFormChange);
	for (var i in CKEDITOR.instances) {
        CKEDITOR.instances[i].on('key', onFormChange );
	}
});


</script>
		
	{% else %}
		{% include 'app/menu.html.twig' with {
			'item':  'data-index-' ~ revision.contentType.id
		}%}
	{% endif %}
{% endblock %}	

