{% extends 'base.html.twig' %}

{% block title %}{{ view.name }} for {{view.contentType.pluralName|humanize}}{% endblock %}
{% block pagetitle %}{{ view.name }} for {{view.contentType.pluralName|humanize}}{% endblock %} 
{# {% block subtitle %}<!-- TODO -->{% endblock %} #}


{% block body %}

<div class="row">

	<div class="col-md-12">
		<div class="box box-primary">
			<div class="box-header with-border">
				<h3 class="box-title">Configuration</h3>
			</div>
			<!-- /.box-header -->
			
			<!-- form start -->
			{{ form_start(form) }}
				
				<div class="box-body">
					<div class="row">
						<div class="col-md-4">
							{{ form_row(form.columnCriteria) }}
						</div>
						<div class="col-md-4">
							{{ form_row(form.rowCriteria) }}
						</div>
						{% if form.category %}
							{{ form_row(form.category) }}
						{% endif %}
					</div>
					<div class="row" id="criterion">
						{{ form_widget(form.criterion) }}
					</div>
			
				</div>
				{{ form_end(form) }}
				<!-- /.box-body -->
				<div class="box-footer">
					<button type="submit" class="btn btn-primary" id="applyConfig">Apply</button>
				</div>
		</div>
	</div>
</div>

<div class="row">
	<div class="col-md-12" id="table_container">
	</div>
</div>

{% endblock %} 


{% block javascripts %}
	{% include 'app/menu.html.twig' with {
		'item':  'data-view-'~ contentType.id ~ '-' ~ view.id
	}%}
	
	<script type="text/javascript">
<!--

//-->
function formatRepo (repo) {
    if (repo.loading) return repo.text;

    var markup = "<div class='select2-result-repository clearfix'>" +
      repo.text + "</div>";
      
    return markup;
}

function formatRepoSelection (repo) {
	return repo.text;
}


function formatRepoSelectionForTable (repo) {
	var color = $(repo.element).data('color');
	if(!color) {
		color = repo.color;
	}
	
	var url = "{{ url('data.revisions', {type: '__type__' , ouuid: '__ouuid__' }) }}";
	url = url.replace('__type__:__ouuid__', repo.id);

	var complementary;
	if(color){
		//var colorIntValue = parseInt(color.replace("#", "0x"));
		//complementary = '#'+('000000' + (('0xffffff' ^ colorIntValue).toString(16))).slice(-6);

		complementary = (luma(color.replace("#", "")) >= 165) ? '#000000' : '#ffffff';
	}

	var html = $("<a href=\""+url+"\" style=\"color: "+complementary+";background-color: "+color+"; padding: 2px;\">"+repo.text+"</a>");
	return html;
}

$(window).load(function() {



	$('.criteria-filter-columnrow').change(function(event){

		if($('#criteria_filter_columnCriteria option:selected').val() == $('#criteria_filter_rowCriteria  option:selected').val()){
			if($(this).attr('id') == 'criteria_filter_columnCriteria'){
// 				console.log('row');
// 				console.log($('#criteria_filter_rowCriteria option:not(:selected)').first().val());
				$('#criteria_filter_rowCriteria').val($('#criteria_filter_rowCriteria option:not(:selected)').first().val());

			}
			else {
// 				console.log('col');
// 				console.log($('#criteria_filter_columnCriteria option:not(:selected)').first().val());
				$('#criteria_filter_columnCriteria').val($('#criteria_filter_columnCriteria option:not(:selected)').first().val());

			}
		
		}

		$('div#criterion select').each(function(index){
			var criterionName = $( this ).closest('div[data-name]').data('name');
			var colCriteria = $('#criteria_filter_columnCriteria').val();
			var rowCriteria = $('#criteria_filter_rowCriteria').val();

			var attr = $(this).attr('multiple');

			// For some browsers, `attr` is undefined; for others,
			// `attr` is false.  Check for both.
			if (typeof attr !== typeof undefined && attr !== false) {
				if(criterionName != colCriteria && criterionName != rowCriteria) {
					$(this).val('');
					$(this).removeAttr('multiple');
					objectPickerListeners($( this ));
				}
			}
			else {

				if(criterionName == colCriteria || criterionName == rowCriteria) {
					$(this).val('');
					$(this).attr('multiple', true);
					objectPickerListeners($( this ));
				}
			}

	 	});
	});

	$('#applyConfig').click(function(event){
		event.preventDefault();
		var formContent = $("form[name=criteria_filter").serialize();

		$('#table_container').empty();
		
		$.get("{{ url('views.criteria.table', {view: view.id}) }}", formContent)
		  .done(function(message) {

			  $('#table_container').append(message);

			  $('#table_container select').select2({
				  ajax: {
					    url: '{{ url("elasticsearch.api.search") }}',
					    dataType: 'json',
					    delay: 250,
					    data: function (params) {
					      return {
					        q: params.term, // search term
					        environment: {{ contentType.environment.name|json_encode|raw }},
					        type: {{ contentType.name|json_encode|raw }},
					        page: params.page
					      };
					    },
					    processResults: function (data, params) {
					      // parse the results into the format expected by Select2
					      // since we are using custom formatting functions we do not need to
					      // alter the remote JSON data, except to indicate that infinite
					      // scrolling can be used
					      params.page = params.page || 1;
					
					      return {
					        results: data.items,
					        pagination: {
					          more: (params.page * 30) < data.total_count
					        }
					      };
					    },
					    cache: true
					  },
					  escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
					  minimumInputLength: 1,
					  templateResult: formatRepo, // omitted for brevity, see the source of this page
					  templateSelection: formatRepoSelectionForTable // omitted for brevity, see the source of this page
				});

			  	$('#table_container select').change(function(){
					var filters = $.merge( $(this).closest('td').data('filters'), $(this).closest('table').data('filters') )
				  	$(this).children("option:selected").each(function() {
					  	var data = { 
					  			filters: filters, 
							  	target: $(this).val(), 
							  	criteriaField: {{ view.options.criteriaField|json_encode|raw }}
						};
						
					  	$.post( "{{ url('views.criteria.add') }}", data)
				  	  		.fail(function( ) {
					  	    	alert("It was impossible to save the last change! Please reload the page and retry.");
					  	});

// 					  	color = $(this).data('color');
// 					  	console.log(color);
// 					  	console.log($(this));
// 					  	if(color){
// 						  	$(this).closest('td').find('li[title="'+$(this).html()+'"]').each(function (){
// 								console.log($(this));
// 							  	$(this).attr('style', 'background-color: red; border-color: red;');
// 							});
// 						}
					  	
				  	});
				  	
				  	$(this).children("option:not(:selected)").each(function() {
					  	var data = { 
					  			filters: filters, 
							  	target: $(this).val(), 
							  	criteriaField: {{ view.options.criteriaField|json_encode|raw }}
						};
						
					  	$.post( "{{ url('views.criteria.remove') }}", data)
				  	  		.fail(function( ) {
					  	    	alert("It was impossible to save the last change! Please reload the page and retry.");
					  		});
				  	});
				});
			  
		  })
		  .fail(function() {
			alert( "Unable to retrieve the criteria table." );
		  })
		  .always(function() {
// 			globalWaitingResponse = false;
		});
	});

	$(".objectpicker").each(function(index){
		objectPickerListeners($( this ));
	});

	$(".select2Filter").each(function(){
		
		var targetField = $("#"+$(this).data('field-target'));

		$( this ).select2({
			  ajax: {
			    url: '{{ url("views.criteria.fieldFilter") }}',
			    dataType: 'json',
			    delay: 250,
			    data: function (params) {
				    
			      return {
			        q: params.term, // search term
			        page: params.page,
			        targetField: targetField.val(),
			      };
			    },
			    processResults: function (data, params) {
			      // parse the results into the format expected by Select2
			      // since we are using custom formatting functions we do not need to
			      // alter the remote JSON data, except to indicate that infinite
			      // scrolling can be used
			      params.page = params.page || 1;
			
			      return {
			        results: data.items,
			        pagination: {
			          more: (params.page * 30) < data.total_count
			        }
			      };
			    },
			    cache: true
			  },
			  escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
			  minimumInputLength: 0,
			  templateResult: formatRepo, // omitted for brevity, see the source of this page
			  templateSelection: formatRepoSelection // omitted for brevity, see the source of this page
			});
		
	});

	$('.criteria-filter-columnrow').trigger('change');
	
});






</script>
{% endblock %}	