<?php

namespace AppBundle\Repository;

use AppBundle\Entity\User;
use Symfony\Component\Security\Core\Authorization\AuthorizationCheckerInterface;
use AppBundle\Entity\Notification;
/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends \Doctrine\ORM\EntityRepository
{
	/**@var AuthorizationCheckerInterface $authorizationChecker*/
	protected $authorizationChecker;
	
	public function setAuthorizationChecker(AuthorizationCheckerInterface $authorizationChecker){
		$this->authorizationChecker = $authorizationChecker;
	}
	
	/**
	 * Count notifications for logged user
	 * 
	 * @param User $user
	 * @return int
	 */
	public function countPendingByUserRoleAndCircle(User $user) {
		
		$templateIds = $this->getTemplatesIdsForUser($user);
		
		$query = $this->createQueryBuilder('n')
		->select('COUNT(n)')
		->where('n.status = :status')
		->andwhere('n.templateId IN (:ids)')
		->setParameters(array('status' => "pending", 'ids' => $templateIds));
		$result = $query->getQuery()->getSingleScalarResult();
		
		return $result;
	}
	
	/**
	 * Select notifications for logged user
	 *
	 * @param User $user
	 * @return array Notification
	 */
	public function findByPendingAndUserRoleAndCircle(User $user) {
	
		$templateIds = $this->getTemplatesIdsForUser($user);
	
		$qb = $this->createQueryBuilder('n')
		->select('n')
		->where('n.status = :status')
		->andwhere('n.templateId IN (:ids)')
		->setParameters(array('status' => "pending", 'ids' => $templateIds));
		$query = $qb->getQuery();

		$results = $query->getResult();
	
		return $results;
	}
	
	/**
	 * Limit template by user role and user circles
	 * 
	 * @param User $user
	 * @return array() of templateId
	 */
	 private function getTemplatesIdsForUser($user) {
	 	$circles = $user->getCircles();
	 	
	 	$em = $this->getEntityManager();
	 	$templateRepoitory = $em->getRepository( 'AppBundle:Template' );
	 	
	 	$results = $templateRepoitory->findByRenderOption('notification');
	 	$templateIds = array();
	 	foreach ($results as $template) {
	 	
	 		$role = $template->getRoleTo();
	 		if ($this->authorizationChecker->isGranted($role) || $role === 'not-defined'){
	 			if(empty($template->getCirclesTo())) {
	 				$templateIds[] = $template->getId();
	 			} else {
	 				$commonCircle = array_intersect($circles, $template->getCirclesTo());
	 				if(!empty($commonCircle)) {
	 					$templateIds[] = $template->getId();
	 				}
	 			}
	 		}
	 	}
	 	return $templateIds;
	 }
}
